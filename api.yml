{
  "openapi": "3.0.1",
  "info": {
    "title": "BookSpot API",
    "description": "A comprehensive booking system API for service providers and clients",
    "contact": {
      "name": "BookSpot Support",
      "email": "support@bookspot.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "v1"
  },
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "description": "Creates a new user account with email, full name, optional contact number, password, and user type (client or provider).",
        "requestBody": {
          "description": "Registration details including email, full name, optional contact number, password, and user type",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully registered and authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "User with email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "201": {
            "description": "Created - Resource successfully created"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authenticate user and get JWT token",
        "description": "Authenticates a user with email and password, returns a JWT token for subsequent API calls.",
        "requestBody": {
          "description": "Login credentials (email and password)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "201": {
            "description": "Created - Resource successfully created"
          }
        }
      }
    },
    "/bookings/{id}": {
      "get": {
        "tags": [
          "Bookings"
        ],
        "summary": "Get booking by ID",
        "description": "Performs Get operation on Bookings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Bookings"
        ],
        "summary": "Put Bookings",
        "description": "Performs Put operation on Bookings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookingCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookingCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookingCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found - Resource does not exist"
          }
        }
      },
      "delete": {
        "tags": [
          "Bookings"
        ],
        "summary": "Delete Bookings",
        "description": "Performs Delete operation on Bookings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found - Resource does not exist"
          },
          "204": {
            "description": "No Content - Resource successfully deleted"
          }
        }
      }
    },
    "/bookings": {
      "post": {
        "tags": [
          "Bookings"
        ],
        "summary": "Create a new booking",
        "description": "Creates a new booking for a service. Only clients can create bookings. The system automatically determines the provider from the service.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookingCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookingCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookingCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "201": {
            "description": "Created - Resource successfully created"
          }
        }
      }
    },
    "/bookings/provider/{providerId}": {
      "get": {
        "tags": [
          "Bookings"
        ],
        "summary": "Get bookings for a provider",
        "description": "Retrieves all bookings for a specific provider with optional filtering by status and date range.",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "description": "Provider's user ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by booking status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["pending", "confirmed", "completed", "cancelled"]
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Filter bookings from this date (ISO format)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Filter bookings until this date (ISO format)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bookings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookingWithDetails"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Can only access own bookings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/businesses/{id}": {
      "get": {
        "tags": [
          "Businesses"
        ],
        "summary": "Get business by ID",
        "description": "Performs Get operation on Businesses",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Business ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Business found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Business"
                }
              }
            }
          },
          "404": {
            "description": "Business not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Businesses"
        ],
        "summary": "Put Businesses",
        "description": "Performs Put operation on Businesses",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Business ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Business update details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Business updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Business"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or ID mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Business not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Only business owner can update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Businesses"
        ],
        "summary": "Delete Businesses",
        "description": "Performs Delete operation on Businesses",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Business ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Business deleted successfully"
          },
          "404": {
            "description": "Business not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Only business owner can delete",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/businesses/{id}/services": {
      "get": {
        "tags": [
          "Businesses"
        ],
        "summary": "Get services offered by business",
        "description": "Retrieves all services offered by a specific business. Useful for browsing services from a particular provider.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Business ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Services retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Business not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/businesses": {
      "post": {
        "tags": [
          "Businesses"
        ],
        "summary": "Create a new business",
        "description": "Creates a new business for the authenticated provider. Only users with 'provider' type can create businesses.",
        "requestBody": {
          "description": "Business creation details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Business created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Business"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Only providers can create businesses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/dashboard/provider/{providerId}/stats": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get provider dashboard statistics",
        "description": "Retrieves dashboard statistics for a provider including bookings count, revenue, and client metrics.",
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "description": "Provider's user ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardStats"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Can only access own statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Provider not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/locations/cities": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get available cities",
        "description": "Retrieves all cities where services are available, with service counts.",
        "responses": {
          "200": {
            "description": "Cities retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CityInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/business-hours/{id}": {
      "get": {
        "tags": [
          "BusinessHours"
        ],
        "summary": "Get business hours by ID",
        "description": "Performs Get operation on BusinessHours",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessHour"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessHour"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessHour"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "BusinessHours"
        ],
        "summary": "Put BusinessHours",
        "description": "Performs Put operation on BusinessHours",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessHourCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessHourCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBusinessHourCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessHour"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessHour"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessHour"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found - Resource does not exist"
          }
        }
      },
      "delete": {
        "tags": [
          "BusinessHours"
        ],
        "summary": "Delete BusinessHours",
        "description": "Performs Delete operation on BusinessHours",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found - Resource does not exist"
          },
          "204": {
            "description": "No Content - Resource successfully deleted"
          }
        }
      }
    },
    "/business-hours": {
      "post": {
        "tags": [
          "BusinessHours"
        ],
        "summary": "Set business hours",
        "description": "Sets operating hours for a specific day of the week for a business. Only business owners can set hours.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessHourCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessHourCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBusinessHourCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessHour"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessHour"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessHour"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "201": {
            "description": "Created - Resource successfully created"
          }
        }
      }
    },
    "/profiles/{id}": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get user profile by ID",
        "description": "Retrieves a user profile by ID. Users can only access their own profile unless they are providers.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Profiles"
        ],
        "summary": "Put Profiles",
        "description": "Performs Put operation on Profiles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found - Resource does not exist"
          }
        }
      },
      "delete": {
        "tags": [
          "Profiles"
        ],
        "summary": "Delete Profiles",
        "description": "Performs Delete operation on Profiles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found - Resource does not exist"
          },
          "204": {
            "description": "No Content - Resource successfully deleted"
          }
        }
      }
    },
    "/profiles/me": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "summary": "Get current authenticated user's profile",
        "description": "Retrieves the profile of the currently authenticated user based on JWT token.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/profiles": {
      "post": {
        "tags": [
          "Profiles"
        ],
        "summary": "Post Profiles",
        "description": "Performs Post operation on Profiles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProfileCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProfileCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProfileCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "201": {
            "description": "Created - Resource successfully created"
          }
        }
      }
    },
    "/reviews/{id}": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Get review by ID",
        "description": "Performs Get operation on Reviews",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Reviews"
        ],
        "summary": "Put Reviews",
        "description": "Performs Put operation on Reviews",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found - Resource does not exist"
          }
        }
      },
      "delete": {
        "tags": [
          "Reviews"
        ],
        "summary": "Delete Reviews",
        "description": "Performs Delete operation on Reviews",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found - Resource does not exist"
          },
          "204": {
            "description": "No Content - Resource successfully deleted"
          }
        }
      }
    },
    "/reviews": {
      "post": {
        "tags": [
          "Reviews"
        ],
        "summary": "Create a new review",
        "description": "Creates a review for a completed booking. Reviews help other clients make informed decisions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "201": {
            "description": "Created - Resource successfully created"
          }
        }
      }
    },
    "/services": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Get all available services",
        "description": "Retrieves all available services across all businesses.",
        "responses": {
          "200": {
            "description": "Services retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Services"
        ],
        "summary": "Create a new service",
        "description": "Creates a new service for a business. Only the business owner can create services.",
        "requestBody": {
          "description": "Service creation details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Only business owners can create services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/services/search": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Search services with filters",
        "description": "Search and filter services by name, city, price range, duration, with pagination support.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by service name (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "query",
            "description": "Filter by business city (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minPrice",
            "in": "query",
            "description": "Minimum price filter",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": "Maximum price filter",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "minDuration",
            "in": "query",
            "description": "Minimum duration in minutes",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxDuration",
            "in": "query",
            "description": "Maximum duration in minutes",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Items per page (default: 20, max: 100)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Services retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid search parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/services/{id}": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Get service by ID",
        "description": "Performs Get operation on Services",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Services"
        ],
        "summary": "Put Services",
        "description": "Performs Put operation on Services",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Service update details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or ID mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Only service owner can update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Services"
        ],
        "summary": "Delete Services",
        "description": "Performs Delete operation on Services",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Service deleted successfully"
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Only service owner can delete",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/test/exception/{type}": {
      "get": {
        "tags": [
          "Test"
        ],
        "summary": "TestException Test",
        "description": "Performs TestException operation on Test",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/test/validation-details": {
      "get": {
        "tags": [
          "Test"
        ],
        "summary": "TestValidationWithDetails Test",
        "description": "Performs TestValidationWithDetails operation on Test",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request - Validation errors or invalid input"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "user@example.com"
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "example": "John Doe"
          },
          "contactNumber": {
            "type": "string",
            "nullable": true,
            "example": "+1 (555) 123-4567"
          },
          "userType": {
            "type": "string",
            "nullable": true,
            "example": "client"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Booking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "serviceId": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "providerId": {
            "type": "string",
            "nullable": true
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T14:00:00Z"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T15:30:00Z"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Business": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "providerId": {
            "type": "string",
            "nullable": true
          },
          "businessName": {
            "type": "string",
            "nullable": true,
            "example": "Sunny Day Spa"
          },
          "city": {
            "type": "string",
            "nullable": true,
            "example": "New York"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "user@example.com"
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "number",
            "format": "double",
            "example": 5
          },
          "reviewCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BusinessHour": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "businessId": {
            "type": "string",
            "nullable": true
          },
          "dayOfWeek": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "openTime": {
            "type": "string",
            "nullable": true,
            "example": "09:00"
          },
          "closeTime": {
            "type": "string",
            "nullable": true,
            "example": "17:00"
          },
          "isClosed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateBookingCommand": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "string",
            "nullable": true
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T14:00:00Z"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T15:30:00Z"
          }
        },
        "additionalProperties": false
      },
      "CreateBusinessCommand": {
        "type": "object",
        "properties": {
          "businessName": {
            "type": "string",
            "nullable": true,
            "example": "Sunny Day Spa"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "user@example.com"
          },
          "city": {
            "type": "string",
            "nullable": true,
            "example": "New York"
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateBusinessHourCommand": {
        "type": "object",
        "properties": {
          "businessId": {
            "type": "string",
            "nullable": true
          },
          "dayOfWeek": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "openTime": {
            "type": "string",
            "nullable": true,
            "example": "09:00"
          },
          "closeTime": {
            "type": "string",
            "nullable": true,
            "example": "17:00"
          },
          "isClosed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateProfileCommand": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true,
            "example": "user@example.com"
          },
          "userType": {
            "type": "string",
            "nullable": true,
            "example": "client"
          }
        },
        "additionalProperties": false
      },
      "CreateReviewCommand": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "example": "Excellent service!"
          }
        },
        "additionalProperties": false
      },
      "CreateServiceCommand": {
        "type": "object",
        "properties": {
          "businessId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Deep Tissue Massage"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 85.5
          },
          "durationMinutes": {
            "type": "integer",
            "format": "int32",
            "example": 90
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "description": " (Required)",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "minLength": 6,
            "type": "string",
            "description": " (Required)",
            "example": "SecurePass123!"
          }
        },
        "additionalProperties": false,
        "example": {
          "email": "john.doe@example.com",
          "password": "SecurePass123!"
        }
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "Profile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "user@example.com"
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "example": "John Doe"
          },
          "contactNumber": {
            "type": "string",
            "nullable": true,
            "example": "+1 (555) 123-4567"
          },
          "userType": {
            "type": "string",
            "nullable": true,
            "example": "client"
          },
          "passwordHash": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "RegisterRequest": {
        "required": [
          "email",
          "fullName",
          "password",
          "userType"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "description": " (Required)",
            "format": "email",
            "example": "user@example.com"
          },
          "fullName": {
            "minLength": 1,
            "type": "string",
            "description": " (Required)",
            "example": "John Doe"
          },
          "contactNumber": {
            "type": "string",
            "nullable": true,
            "example": "+1 (555) 123-4567"
          },
          "password": {
            "minLength": 8,
            "type": "string",
            "description": " (Required)",
            "example": "SecurePass123!"
          },
          "userType": {
            "minLength": 1,
            "type": "string",
            "description": " (Required)",
            "example": "client"
          }
        },
        "additionalProperties": false,
        "example": {
          "email": "john.doe@example.com",
          "fullName": "John Doe",
          "contactNumber": "+1 (555) 123-4567",
          "password": "SecurePass123!",
          "userType": "client"
        }
      },
      "Review": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "bookingId": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "example": "Excellent service!"
          }
        },
        "additionalProperties": false
      },
      "Service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "businessId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Deep Tissue Massage"
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 85.5
          },
          "durationMinutes": {
            "type": "integer",
            "format": "int32",
            "example": 90
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UpdateBookingCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T14:00:00Z"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T15:30:00Z"
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateBusinessCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "businessName": {
            "type": "string",
            "nullable": true,
            "example": "Sunny Day Spa"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "user@example.com"
          },
          "city": {
            "type": "string",
            "nullable": true,
            "example": "New York"
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UpdateBusinessHourCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "dayOfWeek": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "openTime": {
            "type": "string",
            "nullable": true,
            "example": "09:00"
          },
          "closeTime": {
            "type": "string",
            "nullable": true,
            "example": "17:00"
          },
          "isClosed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UpdateProfileCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "user@example.com"
          },
          "userType": {
            "type": "string",
            "nullable": true,
            "example": "client"
          }
        },
        "additionalProperties": false
      },
      "UpdateReviewCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "example": "Excellent service!"
          }
        },
        "additionalProperties": false
      },
      "UpdateServiceCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Deep Tissue Massage"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 85.5
          },
          "durationMinutes": {
            "type": "integer",
            "format": "int32",
            "example": 90
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BookingWithDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "serviceId": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "providerId": {
            "type": "string",
            "nullable": true
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T14:00:00Z"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T15:30:00Z"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "confirmed", "completed", "cancelled"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "service": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string",
                "example": "Premium Men's Haircut"
              },
              "price": {
                "type": "number",
                "format": "double",
                "example": 150
              },
              "durationMinutes": {
                "type": "integer",
                "format": "int32",
                "example": 90
              }
            }
          },
          "client": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "fullName": {
                "type": "string",
                "example": "John Smith"
              },
              "email": {
                "type": "string",
                "format": "email",
                "example": "john@example.com"
              },
              "contactNumber": {
                "type": "string",
                "nullable": true,
                "example": "+27 11 555 0123"
              }
            }
          },
          "business": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "businessName": {
                "type": "string",
                "example": "Premium Cuts Barber Shop"
              },
              "city": {
                "type": "string",
                "example": "Johannesburg"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "DashboardStats": {
        "type": "object",
        "properties": {
          "todayBookings": {
            "type": "integer",
            "format": "int32",
            "example": 5,
            "description": "Number of bookings today"
          },
          "weekBookings": {
            "type": "integer",
            "format": "int32",
            "example": 23,
            "description": "Number of bookings this week"
          },
          "totalClients": {
            "type": "integer",
            "format": "int32",
            "example": 156,
            "description": "Total unique clients served"
          },
          "monthlyRevenue": {
            "type": "number",
            "format": "double",
            "example": 12500.00,
            "description": "Revenue this month from completed bookings"
          },
          "pendingBookings": {
            "type": "integer",
            "format": "int32",
            "example": 3,
            "description": "Number of pending bookings"
          },
          "confirmedBookings": {
            "type": "integer",
            "format": "int32",
            "example": 8,
            "description": "Number of confirmed bookings"
          }
        },
        "additionalProperties": false
      },
      "CityInfo": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string",
            "example": "Johannesburg",
            "description": "City name"
          },
          "province": {
            "type": "string",
            "example": "Gauteng",
            "description": "Province or state"
          },
          "serviceCount": {
            "type": "integer",
            "format": "int32",
            "example": 45,
            "description": "Number of services available in this city"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Enter 'Bearer' [space] and then your token in the text input below.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}